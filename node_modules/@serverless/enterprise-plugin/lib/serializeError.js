'use strict'; // coppied from https://github.com/sindresorhus/serialize-error/blob/master/index.js and converted
// to use _.entries instead of Object.entries. and linted for our standards

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

const _require = require('lodash'),
      entries = _require.entries;

const destroyCircular = (from, seen) => {
  const to = Array.isArray(from) ? [] : {};
  seen.push(from);
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = entries(from)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      const _step$value = _slicedToArray(_step.value, 2),
            key = _step$value[0],
            value = _step$value[1];

      if (typeof value === 'function') {
        continue;
      }

      if (!value || typeof value !== 'object') {
        to[key] = value;
        continue;
      }

      if (!seen.includes(from[key])) {
        to[key] = destroyCircular(from[key], seen.slice());
        continue;
      }

      to[key] = '[Circular]';
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return != null) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  const commonProperties = ['name', 'message', 'stack', 'code'];

  for (var _i = 0, _commonProperties = commonProperties; _i < _commonProperties.length; _i++) {
    const property = _commonProperties[_i];

    if (typeof from[property] === 'string') {
      to[property] = from[property];
    }
  }

  return to;
};

const serializeError = value => {
  if (typeof value === 'object') {
    return destroyCircular(value, []);
  } // People sometimes throw things besides Error objectsâ€¦


  if (typeof value === 'function') {
    // `JSON.stringify()` discards functions. We do too, unless a function is thrown directly.
    return `[Function: ${value.name || 'anonymous'}]`;
  }

  return value;
};

module.exports = serializeError; // TODO: Remove this for the next major release

module.exports.default = serializeError;
//# sourceMappingURL=serializeError.js.map