{"version":3,"sources":["../../../lib/interactiveCli/register.js"],"names":["chalk","require","createApp","getLoggedInUser","getMetadata","login","register","writeConfigFile","sdkVersion","version","enableConfirm","writeTenantAndApp","isValidEmail","RegExp","prototype","test","bind","registerQuestion","inquirer","prompt","message","type","name","choices","accessMode","emailInput","validate","input","trim","toLowerCase","dashboardEmail","passwordInput","length","dashboardPassword","sdkSignUp","email","password","userName","tenantName","error","errorData","JSON","parse","parseError","errorMessage","includes","trailingNumberMatches","match","Number","sdkMessage","generateUserName","slice","indexOf","replace","repeat","Math","max","keepValidTenantNameChars","generateTenantName","signUp","process","stdout","write","red","validadateRegistrationResponseValue","value","Error","steps","registerOrLogin","serverless","interactiveCli","ownerUserName","ownerAccessKey","ownerAuth0Id","userId","users","enterprise","versionSDK","timeLastLogin","round","Date","now","dashboard","accessKeys","username","green","tenant","app","service","token","appName","module","exports","check","config","servicePath","provider","supportedRegions","supportedRuntimes","runtime","getProvider","getRegion","run","processedInput","options"],"mappings":"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","sourcesContent":["'use strict';\n\nconst chalk = require('chalk');\nconst {\n  createApp,\n  getLoggedInUser,\n  getMetadata,\n  login,\n  register,\n  writeConfigFile,\n} = require('@serverless/platform-sdk');\nconst sdkVersion = require('@serverless/platform-sdk/package').version;\nconst enableConfirm = require('./enableConfirm');\nconst writeTenantAndApp = require('./writeTenantAndApp');\n\nconst isValidEmail = RegExp.prototype.test.bind(\n  new RegExp(\n    \"^(?:[a-z0-9!#$%&'*+/=?^_`{|}~\\u007f-\\uffff-]+(?:\\\\.[a-z0-9!#$%&'*+/=?^_`\" +\n      '{|}~\\\\u007f-\\\\uffff-]+)*|\"(?:[\\\\x01-\\\\x08\\\\x0b\\\\x0c\\\\x0e-\\\\x1f\\\\x21\\\\x23-\\\\x5b\\\\x5d-' +\n      '\\\\x7f]|\\\\\\\\[\\\\x01-\\\\x09\\\\x0b\\\\x0c\\\\x0e-\\\\x7f])*\")@(?:(?:[a-z0-9](?:[a-' +\n      'z0-9-]*[a-z0-9])?\\\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\\\[(?:(?:25[0-5]' +\n      '|2[0-4][0-9]|[01]?[0-9][0-9]?)\\\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9]' +\n      '[0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\\\\x01-\\\\x08\\\\x0b\\\\x0c\\\\x0e-\\\\x1f\\\\x21-' +\n      '\\\\x5a\\\\x53-\\\\x7f]|\\\\\\\\[\\\\x01-\\\\x09\\\\x0b\\\\x0c\\\\x0e-\\\\x7f])+)\\\\])$'\n  )\n);\n\nconst registerQuestion = async inquirer =>\n  (await inquirer.prompt({\n    message: 'Do you want to login or register?',\n    type: 'list',\n    name: 'accessMode',\n    choices: ['register', 'login'],\n  })).accessMode;\n\nconst emailInput = async inquirer =>\n  (await inquirer.prompt({\n    message: 'email:',\n    type: 'input',\n    name: 'dashboardEmail',\n    validate: input => {\n      input = input.trim().toLowerCase();\n      if (isValidEmail(input)) return true;\n      return 'Provided email address is not valid';\n    },\n  })).dashboardEmail\n    .trim()\n    .toLowerCase();\n\nconst passwordInput = async inquirer =>\n  (await inquirer.prompt({\n    message: 'password:',\n    type: 'password',\n    name: 'dashboardPassword',\n    validate: input => {\n      if (input.trim().length >= 7) return true;\n      return 'Password needs to have at least 7 characters';\n    },\n  })).dashboardPassword.trim();\n\nconst sdkSignUp = async (email, password, userName, tenantName) => {\n  try {\n    return await register(email, password, userName, tenantName, tenantName);\n  } catch (error) {\n    const errorData = (() => {\n      try {\n        return JSON.parse(error.message);\n      } catch (parseError) {\n        throw error;\n      }\n    })();\n    if (!errorData || !errorData.errorMessage) throw error;\n    if (errorData.errorMessage.includes('this username already exists')) {\n      const trailingNumberMatches = userName.match(/^(.*)(\\d+)$/);\n      if (trailingNumberMatches) {\n        userName = trailingNumberMatches[1] + (Number(trailingNumberMatches[2]) + 1);\n      } else {\n        userName += '2';\n      }\n      return sdkSignUp(email, password, userName, tenantName);\n    }\n    if (errorData.errorMessage.includes('tenant with this name already exists')) {\n      const trailingNumberMatches = tenantName.match(/^(.*)(\\d+)$/);\n      if (trailingNumberMatches) {\n        tenantName = trailingNumberMatches[1] + (Number(trailingNumberMatches[2]) + 1);\n      } else {\n        tenantName += '2';\n      }\n      return sdkSignUp(email, password, userName, tenantName);\n    }\n    if (errorData.errorMessage.includes('\"tenantName\" length must be at least')) {\n      tenantName += 'x';\n      return sdkSignUp(email, password, userName, tenantName);\n    }\n    error.sdkMessage = errorData.errorMessage;\n    throw error;\n  }\n};\n\nconst generateUserName = email => {\n  let userName = email.slice(0, email.indexOf('@')).replace(/[^a-z0-9]+/g, '');\n  if (userName.length === 0) {\n    userName = email.slice(1 + email.indexOf('@')).replace(/[^a-z0-9]+/g, '');\n  }\n  userName += 'x'.repeat(Math.max(5 - userName.length, 0));\n  return userName;\n};\n\nconst keepValidTenantNameChars = name => name.replace(/[^a-zA-Z0-9]/g, '');\nconst generateTenantName = email => {\n  const userName = generateUserName(email);\n  const tenantName = keepValidTenantNameChars(userName);\n  return tenantName;\n};\n\nconst signUp = async (inquirer, email = null) => {\n  if (!email) email = await emailInput(inquirer);\n  const password = await passwordInput(inquirer);\n  const userName = generateUserName(email);\n  const tenantName = generateTenantName(email);\n\n  try {\n    return await sdkSignUp(email, password, userName, tenantName);\n  } catch (error) {\n    if (error.sdkMessage) {\n      if (error.sdkMessage.includes('user already exists')) {\n        // There's already account with given email registered\n        process.stdout.write(\n          chalk.red(\n            \"There's already registered account for given email address. Please try different email address\\n\"\n          )\n        );\n        return signUp(inquirer);\n      }\n      if (error.sdkMessage.includes('PasswordStrengthError')) {\n        process.stdout.write(chalk.red('Password is too weak. Please try different one\\n'));\n        return signUp(inquirer, email);\n      }\n    }\n    throw error;\n  }\n};\n\nconst validadateRegistrationResponseValue = (name, value) => {\n  if (!value) throw new Error(`Missing ${name} in register response`);\n};\n\nconst steps = {\n  registerOrLogin: async serverless => {\n    const { inquirer } = serverless.interactiveCli;\n    const registerOrLogin = await registerQuestion(inquirer);\n    if (registerOrLogin === 'login') {\n      await login();\n      return;\n    }\n    const { ownerUserName, tenantName, ownerAccessKey, ownerAuth0Id } = await signUp(inquirer);\n    validadateRegistrationResponseValue('ownerUserName', ownerUserName);\n    validadateRegistrationResponseValue('tenantName', tenantName);\n    validadateRegistrationResponseValue('ownerAccessKey', ownerAccessKey);\n    validadateRegistrationResponseValue('ownerAuth0Id', ownerAuth0Id);\n    writeConfigFile({\n      userId: ownerAuth0Id,\n      users: {\n        [ownerAuth0Id]: {\n          userId: ownerAuth0Id,\n          userName: ownerUserName,\n          enterprise: {\n            versionSDK: sdkVersion,\n            timeLastLogin: Math.round(Date.now() / 1000),\n          },\n          dashboard: {\n            accessKeys: {\n              [tenantName]: ownerAccessKey,\n            },\n            username: ownerUserName,\n          },\n        },\n      },\n    });\n\n    process.stdout.write(`\\n${chalk.green('Successfully registered your new account')}\\n`);\n\n    const { appName } = await createApp({\n      tenant: tenantName,\n      app: `${serverless.service.service}-app`,\n      token: ownerAccessKey,\n    });\n\n    await writeTenantAndApp(serverless, tenantName, appName);\n  },\n};\n\nmodule.exports = {\n  async check(serverless) {\n    if (!serverless.config.servicePath) return false;\n    if (serverless.service.provider.name !== 'aws') {\n      return false;\n    }\n    const { supportedRegions, supportedRuntimes } = await getMetadata();\n    if (!supportedRuntimes.includes(serverless.service.provider.runtime || 'nodejs10.x')) {\n      return false;\n    }\n    if (!supportedRegions.includes(serverless.getProvider('aws').getRegion())) {\n      return false;\n    }\n    return !getLoggedInUser();\n  },\n  async run(serverless) {\n    const { inquirer } = serverless.interactiveCli;\n    if (!(await enableConfirm(inquirer, serverless.processedInput.options))) {\n      return null;\n    }\n    process.stdout.write('You are not logged in or you do not have a Serverless account.\\n\\n');\n    return steps.registerOrLogin(serverless);\n  },\n  steps,\n};\n"],"file":"register.js"}