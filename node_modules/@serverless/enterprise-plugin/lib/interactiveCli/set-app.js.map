{"version":3,"sources":["../../../lib/interactiveCli/set-app.js"],"names":["_","require","chalk","createApp","createDeployProfile","getApps","getDeployProfiles","getLoggedInUser","getMetadata","listTenants","refreshToken","setDefaultDeploymentProfile","enableConfirm","writeTenantAndApp","resolveAccessKey","isValidAppName","RegExp","prototype","test","bind","orgUpdateConfirm","inquirer","process","stdout","write","prompt","message","type","name","shouldUpdateOrg","appUpdateConfirm","appName","tenantName","choices","value","appUpdateType","tenantsChoice","tenantNames","Array","from","deployProfileChoice","deployProfiles","deploymentProfile","appNameChoice","appNames","concat","appNameInput","validate","input","trim","includes","newAppName","createAppWithDeploymentProfile","accessKey","tenant","app","token","length","deploymentProfileUid","map","find","steps","resolveTenantNames","user","tenants","Set","idToken","Object","keys","accessKeys","add","username","setTenantAndApp","serverless","apps","interactiveCli","size","values","next","service","has","bold","shouldOverrideDashboardConfig","module","exports","check","config","servicePath","provider","supportedRegions","supportedRuntimes","runtime","getProvider","getRegion","processedInput","options","org","some","red","cli","log","run","appUpdateTypeChoice","Error"],"mappings":"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","sourcesContent":["'use strict';\n\nconst _ = require('lodash');\nconst chalk = require('chalk');\nconst {\n  createApp,\n  createDeployProfile,\n  getApps,\n  getDeployProfiles,\n  getLoggedInUser,\n  getMetadata,\n  listTenants,\n  refreshToken,\n  setDefaultDeploymentProfile,\n} = require('@serverless/platform-sdk');\nconst enableConfirm = require('./enableConfirm');\nconst writeTenantAndApp = require('./writeTenantAndApp');\nconst { resolveAccessKey } = require('./utils');\n\nconst isValidAppName = RegExp.prototype.test.bind(/^[a-z0-9](?:[a-z0-9-]{0,126}[a-z0-9])?$/);\n\nconst orgUpdateConfirm = async inquirer => {\n  process.stdout.write(\n    \"Service has monitoring enabled, but provided configuration doesn't seem to correspond\" +\n      \" to account you're logged in with.\\n\\n\"\n  );\n  return (await inquirer.prompt({\n    message: 'Would you like to update it?',\n    type: 'confirm',\n    name: 'shouldUpdateOrg',\n  })).shouldUpdateOrg;\n};\nconst appUpdateConfirm = async (inquirer, appName, tenantName) => {\n  process.stdout.write(\n    \"Service seems to have monitoring enabled, but configured app doesn't seem to exist in an organization.\\n\\n\"\n  );\n  return (await inquirer.prompt({\n    message: 'What would you like to do?',\n    type: 'list',\n    name: 'appUpdateType',\n    choices: [\n      { name: `Create '${appName}' app in '${tenantName}' org`, value: 'create' },\n      {\n        name: 'Switch to one of the existing apps (or create new one with different name)',\n        value: 'chooseExisting',\n      },\n      { name: \"Skip, I'll sort this out manually\", value: 'skip' },\n    ],\n  })).appUpdateType;\n};\n\nconst tenantsChoice = async (inquirer, tenantNames) =>\n  (await inquirer.prompt({\n    message: 'What org do you want to add this to?',\n    type: 'list',\n    name: 'tenantName',\n    choices: Array.from(tenantNames),\n  })).tenantName;\n\nconst deployProfileChoice = async (inquirer, deployProfiles) =>\n  (await inquirer.prompt({\n    message: 'What deployment profile do you want to use?',\n    type: 'list',\n    name: 'deploymentProfile',\n    choices: Array.from(deployProfiles),\n  })).deploymentProfile;\n\nconst appNameChoice = async (inquirer, appNames) =>\n  (await inquirer.prompt({\n    message: 'What application do you want to add this to?',\n    type: 'list',\n    name: 'appName',\n    choices: Array.from(appNames).concat({ name: '[create a new app]', value: '_create_' }),\n  })).appName;\n\nconst appNameInput = async (inquirer, appNames) =>\n  (await inquirer.prompt({\n    message: 'What do you want to name this application?',\n    type: 'input',\n    name: 'newAppName',\n    validate: input => {\n      input = input.trim();\n      if (!isValidAppName(input)) {\n        return (\n          'App name is not valid.\\n' +\n          '   - It should only contain lowercase alphanumeric and hyphens.\\n' +\n          '   - It should start and end with an alphanumeric character.\\n' +\n          \"   - Shouldn't exceed 128 characters\"\n        );\n      }\n      if (appNames.includes(input)) return 'App of this name already exists';\n      return true;\n    },\n  })).newAppName.trim();\n\nconst createAppWithDeploymentProfile = async (inquirer, tenantName, accessKey, newAppName) => {\n  const { appName } = await createApp({ tenant: tenantName, app: newAppName, token: accessKey });\n\n  let deployProfiles = await getDeployProfiles({ tenant: tenantName, accessKey });\n  let deploymentProfile;\n  if (deployProfiles.length === 0) {\n    await createDeployProfile({ name: 'default', tenant: tenantName, accessKey });\n    deployProfiles = await getDeployProfiles({ tenant: tenantName });\n  }\n  if (deployProfiles.length === 1) {\n    deploymentProfile = deployProfiles[0].deploymentProfileUid;\n  } else {\n    deploymentProfile = await deployProfileChoice(inquirer, deployProfiles.map(({ name }) => name));\n    deploymentProfile = _.find(deployProfiles, ({ name }) => name === deploymentProfile)\n      .deploymentProfileUid;\n  }\n  await setDefaultDeploymentProfile({\n    accessKey,\n    app: appName,\n    tenant: tenantName,\n    deploymentProfile,\n  });\n  return appName;\n};\n\nconst steps = {\n  enableConfirm,\n  resolveTenantNames: async user => {\n    let tenants = new Set();\n    if (!user.idToken) {\n      // User registered over CLI hence idToken is not stored.\n      // Still to resolve tenants (organizations) from platform idToken is needed.\n      // Handling it gently by assuming that tenants listed in config file\n      // make a valid representation\n      for (const tenant of Object.keys(user.accessKeys)) tenants.add(tenant);\n    } else {\n      await refreshToken();\n      user = getLoggedInUser();\n      tenants = new Set(\n        (await listTenants({ username: user.username, idToken: user.idToken })).map(\n          tenant => tenant.tenantName\n        )\n      );\n    }\n    return tenants;\n  },\n  setTenantAndApp: async (\n    serverless,\n    { user, tenantNames, tenantName, apps, appName, newAppName }\n  ) => {\n    const { inquirer } = serverless.interactiveCli;\n    if (!tenantName) {\n      tenantName = await (async () => {\n        if (tenantNames.size === 1) return tenantNames.values().next().value;\n        if (serverless.service.tenant && tenantNames.has(serverless.service.tenant)) {\n          return serverless.service.tenant;\n        }\n        return tenantsChoice(inquirer, tenantNames);\n      })();\n    }\n\n    const accessKey = await resolveAccessKey(user, tenantName);\n    if (!newAppName && !appName) {\n      if (!apps) apps = await getApps({ tenant: tenantName, token: accessKey });\n\n      const appNames = apps.map(app => app.appName);\n      appName = apps.length ? await appNameChoice(inquirer, appNames) : '_create_';\n      if (appName === '_create_') newAppName = await appNameInput(inquirer, appNames);\n    }\n    if (newAppName) {\n      appName = await createAppWithDeploymentProfile(inquirer, tenantName, accessKey, newAppName);\n    }\n    if (\n      serverless.service.app &&\n      serverless.service.tenant &&\n      (tenantName !== serverless.service.tenant || appName !== serverless.service.app)\n    ) {\n      const { shouldOverrideDashboardConfig } = await inquirer.prompt({\n        message: `Are you sure you want to update monitoring settings from ${chalk.bold(\n          `app: ${serverless.service.app}, org: ${serverless.service.tenant}`\n        )} to ${chalk.bold(`app: ${appName}, org: ${tenantName}`)}`,\n        type: 'confirm',\n        name: 'shouldOverrideDashboardConfig',\n      });\n      if (!shouldOverrideDashboardConfig) {\n        return;\n      }\n    }\n    await writeTenantAndApp(serverless, tenantName, appName);\n    return;\n  },\n};\n\nmodule.exports = {\n  async check(serverless) {\n    if (!serverless.config.servicePath) return false;\n    if (serverless.service.provider.name !== 'aws') return false;\n    const { supportedRegions, supportedRuntimes } = await getMetadata();\n    if (!supportedRuntimes.includes(serverless.service.provider.runtime || 'nodejs10.x')) {\n      return false;\n    }\n    if (!supportedRegions.includes(serverless.getProvider('aws').getRegion())) {\n      return false;\n    }\n\n    let user = getLoggedInUser();\n    if (!user) return false;\n\n    const tenantNames = await steps.resolveTenantNames(user);\n    if (!tenantNames.size) return false;\n    user = getLoggedInUser(); // Refreshed, as new token might have been generated\n\n    const tenantName = serverless.processedInput.options.org || serverless.service.tenant;\n    const appName = serverless.processedInput.options.app || serverless.service.app;\n    if (tenantName && tenantNames.has(tenantName)) {\n      const accessKey = await resolveAccessKey(user, tenantName);\n      if (!isValidAppName(appName)) return { user, tenantName };\n      const apps = await getApps({ tenant: tenantName, token: accessKey });\n      if (serverless.processedInput.options.org || serverless.processedInput.options.app) {\n        if (apps.some(app => app.appName === appName)) {\n          return { user, tenantName, appName };\n        }\n        if (serverless.processedInput.options.app) {\n          process.stdout.write(\n            chalk.red(\n              \"\\nPassed value for `--app` doesn't seem to correspond to chosen organization.\\n\"\n            )\n          );\n        }\n        return { user, tenantName };\n      } else if (apps.some(app => app.appName === appName)) {\n        return false;\n      }\n      return { user, tenantName, apps, newAppName: appName };\n    } else if (tenantName) {\n      if (serverless.processedInput.options.org) {\n        process.stdout.write(\n          chalk.red(\n            \"\\nPassed value for `--org` doesn't seem to correspond to account with which you're logged in with.\\n\"\n          )\n        );\n      } else {\n        serverless.cli.log(`Sorry, the org ${tenantName} is not available in your account.`);\n      }\n    }\n    return { user, tenantNames };\n  },\n  async run(serverless, options) {\n    const { inquirer } = serverless.interactiveCli;\n    if (options.newAppName) {\n      delete serverless.service.app;\n    }\n    if (!options.tenantName) {\n      if (serverless.service.tenant) {\n        delete serverless.service.tenant;\n        if (!serverless.processedInput.options.org && !(await orgUpdateConfirm(inquirer))) return;\n      } else if (!(await steps.enableConfirm(inquirer, serverless.processedInput.options))) {\n        return;\n      }\n    } else if (!options.newAppName && !options.appName) {\n      if (!(await steps.enableConfirm(inquirer, serverless.processedInput.options))) {\n        return;\n      }\n    } else if (!serverless.processedInput.options.org && !serverless.processedInput.options.app) {\n      const appUpdateTypeChoice = await appUpdateConfirm(inquirer);\n      switch (appUpdateTypeChoice) {\n        case 'create':\n          break;\n        case 'chooseExisting':\n          delete options.newAppName;\n          break;\n        case 'skip':\n          return;\n        default:\n          throw new Error('Unexpected app update type');\n      }\n    }\n    await steps.setTenantAndApp(serverless, options);\n  },\n  steps,\n};\n"],"file":"set-app.js"}