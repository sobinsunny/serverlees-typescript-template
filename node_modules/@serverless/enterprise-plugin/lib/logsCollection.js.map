{"version":3,"sources":["../../lib/logsCollection.js"],"names":["chalk","require","pickResourceType","upperFirst","API_GATEWAY_FILTER_PATTERN","LAMBDA_FILTER_PATTERN","getAccessKeyForTenant","getLogDestination","module","exports","ctx","sls","service","custom","enterprise","collectLambdaLogs","cli","log","logIngestMode","template","provider","compiledCloudFormationTemplate","logGroups","length","accessKey","tenant","request","Account","destinationOpts","appUid","tenantUid","serviceName","getServiceName","stageName","getStage","regionName","getRegion","accountId","destinationArn","e","message","includes","keyword","Error","Object","keys","logGroupIndex","logGroupKey","key","logGroupName","resource","Properties","LogGroupName","join","filterPattern","startsWith","Resources","Type","DestinationArn","FilterPattern","Ref"],"mappings":"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","sourcesContent":["'use strict';\n\nconst chalk = require('chalk');\n\n/*\n * Logs Collection\n * - Collects `SERVERLESS PLATFORM || REPORT` from lambda logs\n * - Collects `sls-access-logs` from API Gateway access logs\n */\n\nconst {\n  pickResourceType,\n  upperFirst,\n  API_GATEWAY_FILTER_PATTERN,\n  LAMBDA_FILTER_PATTERN,\n} = require('./utils');\n\nconst { getAccessKeyForTenant, getLogDestination } = require('@serverless/platform-sdk');\n\nmodule.exports = async ctx => {\n  if (\n    ctx.sls.service.custom &&\n    ctx.sls.service.custom.enterprise &&\n    ctx.sls.service.custom.enterprise.collectLambdaLogs === false\n  ) {\n    ctx.sls.cli.log('Info: This plugin is not configured to collect AWS Lambda Logs.');\n    return;\n  }\n\n  if (\n    ctx.sls.service.custom &&\n    ctx.sls.service.custom.enterprise &&\n    ctx.sls.service.custom.enterprise.logIngestMode === 'pull'\n  ) {\n    ctx.sls.cli.log('Info: Log ingestion is configured to pull-based ingestion.');\n    return;\n  }\n\n  const template = ctx.sls.service.provider.compiledCloudFormationTemplate;\n\n  // Gather possible targets\n  const logGroups = pickResourceType(template, 'AWS::Logs::LogGroup');\n  if (logGroups.length === 0) {\n    return;\n  }\n\n  const accessKey = await getAccessKeyForTenant(ctx.sls.service.tenant);\n  const { Account } = await ctx.provider.request('STS', 'getCallerIdentity', {});\n  const destinationOpts = {\n    accessKey,\n    appUid: ctx.sls.service.appUid,\n    tenantUid: ctx.sls.service.tenantUid,\n    serviceName: ctx.sls.service.getServiceName(),\n    stageName: ctx.provider.getStage(),\n    regionName: ctx.provider.getRegion(),\n    accountId: Account,\n  };\n\n  let destinationArn;\n\n  try {\n    ({ destinationArn } = await getLogDestination(destinationOpts));\n  } catch (e) {\n    if (e.message && e.message.includes('not supported in region')) {\n      ctx.sls.cli.log(\n        chalk.keyword('orange')(\n          `Warning: Lambda log collection is not supported in ${ctx.provider.getRegion()}`\n        )\n      );\n      return;\n    }\n    throw new Error(e.message);\n  }\n\n  // For each log group, set up subscription\n  for (const logGroupIndex of Object.keys(logGroups)) {\n    const logGroupKey = logGroups[logGroupIndex].key;\n    let logGroupName = logGroups[logGroupIndex].resource.Properties.LogGroupName;\n\n    if (typeof logGroupName === 'object') {\n      if ('Fn::Join' in logGroupName) {\n        logGroupName = logGroupName['Fn::Join'][1].join(logGroupName['Fn::Join'][0]);\n      } else {\n        continue;\n      }\n    }\n\n    const filterPattern = logGroupName.startsWith('/aws/api-gateway/')\n      ? API_GATEWAY_FILTER_PATTERN\n      : LAMBDA_FILTER_PATTERN;\n\n    template.Resources[`CloudWatchLogsSubscriptionFilter${upperFirst(logGroupKey)}`] = {\n      Type: 'AWS::Logs::SubscriptionFilter',\n      Properties: {\n        DestinationArn: destinationArn,\n        FilterPattern: filterPattern,\n        LogGroupName: {\n          Ref: logGroupKey,\n        },\n      },\n    };\n  }\n};\n"],"file":"logsCollection.js"}