{"version":3,"sources":["../../lib/variables.js"],"names":["_","require","getStateVariable","getAccessKeyForTenant","getDeployProfile","getValueFromDashboardParams","ctx","variableString","variableName","slice","indexOf","state","secretsUsed","add","sls","processedInput","commands","interactiveCli","accessKey","service","tenant","deploymentProfile","stage","provider","getStage","pick","secrets","fromPairs","secretValues","map","secretName","secretProperties","value","classes","Error","getValueFromDashboardOutputs","variableParts","split","key","app","region","getRegion","length","outputName","subkey","get","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst _ = require('lodash');\nconst {\n  getStateVariable,\n  getAccessKeyForTenant,\n  getDeployProfile,\n} = require('@serverless/platform-sdk');\n\n// functions for new way of getting variables\nconst getValueFromDashboardParams = ctx => async variableString => {\n  const variableName = variableString.slice(variableString.indexOf(':') + 1);\n  ctx.state.secretsUsed.add(variableName);\n  if (\n    ctx.sls.processedInput.commands[0] === 'login' ||\n    ctx.sls.processedInput.commands[0] === 'logout' ||\n    ctx.sls.interactiveCli\n  ) {\n    return '';\n  }\n  const accessKey = await getAccessKeyForTenant(ctx.sls.service.tenant);\n  const deploymentProfile = await getDeployProfile({\n    accessKey,\n    stage: ctx.provider.getStage(),\n    ..._.pick(ctx.sls.service, ['tenant', 'app', 'service']),\n  });\n  const secrets = _.fromPairs(\n    deploymentProfile.secretValues.map(({ secretName, secretProperties: { value } }) => [\n      secretName,\n      value,\n    ])\n  );\n  if (!secrets[variableName]) {\n    throw new ctx.sls.classes.Error(`$\\{${variableString}} not defined`);\n  }\n  return secrets[variableName];\n};\n\nconst getValueFromDashboardOutputs = ctx => async variableString => {\n  const accessKey = await getAccessKeyForTenant(ctx.sls.service.tenant);\n  if (\n    ctx.sls.processedInput.commands[0] === 'login' ||\n    ctx.sls.processedInput.commands[0] === 'logout' ||\n    ctx.sls.interactiveCli\n  ) {\n    return '';\n  }\n  const variableParts = variableString.split(':').slice(1);\n  let service;\n  let key;\n  let app = ctx.sls.service.app;\n  let stage = ctx.provider.getStage();\n  let region = ctx.provider.getRegion();\n  if (variableParts.length === 1) {\n    service = variableParts[0].split('.', 1)[0];\n    key = variableParts[0].slice(service.length);\n  } else if (variableParts.length === 4) {\n    service = variableParts[3].split('.', 1)[0];\n    key = variableParts[3].slice(service.length);\n    if (variableParts[0]) {\n      app = variableParts[0];\n    }\n    if (variableParts[1]) {\n      stage = variableParts[1];\n    }\n    if (variableParts[2]) {\n      region = variableParts[2];\n    }\n  } else {\n    throw new ctx.sls.classes.Error(\n      '`${${variableString}}` does not conform to syntax ${outputs:service.key} or ${outputs:app:stage:region:service.key}'\n    );\n  }\n  const outputName = key.split('.')[1];\n  const subkey = key.slice(outputName.length + 2);\n  const { value } = await getStateVariable({\n    accessKey,\n    outputName,\n    service,\n    app,\n    tenant: ctx.sls.service.tenant,\n    stage,\n    region,\n  });\n  if (subkey) {\n    return _.get(value, subkey);\n  }\n  return value;\n};\n\nmodule.exports = {\n  getValueFromDashboardParams,\n  getValueFromDashboardOutputs,\n};\n"],"file":"variables.js"}