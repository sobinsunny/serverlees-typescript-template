'use strict';

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

const _require = require('lodash'),
      entries = _require.entries;

module.exports = function forbidS3HttpAccessPolicy(policy, service) {
  let failed = false;
  const Resources = service.compiled['cloudformation-template-update-stack.json'].Resources;
  const buckets = new Map(entries(Resources).filter(([, {
    Type
  }]) => Type === 'AWS::S3::Bucket'));
  const bucketPolicies = new Map(entries(Resources).filter(([, {
    Type
  }]) => Type === 'AWS::S3::BucketPolicy'));
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = buckets[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      const _step$value = _slicedToArray(_step.value, 2),
            bucketName = _step$value[0],
            bucket = _step$value[1];

      let foundMatchingPolicy = false;
      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = bucketPolicies[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          const _step2$value = _slicedToArray(_step2.value, 2),
                bucketPolicy = _step2$value[1];

          if (bucketPolicy.Properties && (bucketPolicy.Properties.Bucket && bucketPolicy.Properties.Bucket.Ref ? bucketPolicy.Properties.Bucket.Ref === bucketName : bucketPolicy.Properties.Bucket === bucket.Properties.Name) && bucketPolicy.PolicyDocument && bucketPolicy.PolicyDocument.Statement.length && bucketPolicy.PolicyDocument.Statement[0].Action === 's3:*' && bucketPolicy.PolicyDocument.Statement[0].Effect === 'Deny' && bucketPolicy.PolicyDocument.Statement[0].Principal === '*' && (bucketPolicy.PolicyDocument.Statement[0].Resource && bucketPolicy.PolicyDocument.Statement[0].Resource['Fn::Join'] ? bucketPolicy.PolicyDocument.Statement[0].Resource['Fn::Join'].length === 2 && bucketPolicy.PolicyDocument.Statement[0].Resource['Fn::Join'][0] === '' && bucketPolicy.PolicyDocument.Statement[0].Resource['Fn::Join'][1].length === 3 && bucketPolicy.PolicyDocument.Statement[0].Resource['Fn::Join'][1][0] === 'arn:aws:s3:::' && bucketPolicy.PolicyDocument.Statement[0].Resource['Fn::Join'][1][1].Ref === bucketName && bucketPolicy.PolicyDocument.Statement[0].Resource['Fn::Join'][1][2] === '/*' : bucketPolicy.PolicyDocument.Statement[0].Resource === `arn:aws:s3:::${bucket.Properties.Name}/*`) && bucketPolicy.PolicyDocument.Statement[0].Condition && bucketPolicy.PolicyDocument.Statement[0].Condition.Bool && bucketPolicy.PolicyDocument.Statement[0].Condition.Bool['aws:SecureTransport'] === false && true) {
            foundMatchingPolicy = true;
          }
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
            _iterator2.return();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }

      if (!foundMatchingPolicy) {
        failed = true;
        policy.fail(`Bucket "${bucketName}" doesn't have a BucketPolicy forbidding unsecure HTTP access.`);
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return != null) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  if (!failed) {
    policy.approve();
  }
};

module.exports.docs = 'http://slss.io/sg-forbid-s3-http-access';
//# sourceMappingURL=forbid-s3-http-access.js.map