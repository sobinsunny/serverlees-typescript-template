'use strict';

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

const _require = require('lodash'),
      entries = _require.entries,
      fromPairs = _require.fromPairs;

module.exports = function requireGlobalVpcPolicy(policy, service, {
  minNumSubnets
} = {
  minNumSubnets: 2
}) {
  let failed = false;
  const functions = service.declaration.functions,
        naming = service.provider.naming,
        Resources = service.compiled['cloudformation-template-update-stack.json'].Resources;
  const logicalFuncNamesToConfigFuncName = fromPairs(Object.keys(functions || {}).map(funcName => [naming.getLambdaLogicalId(funcName), funcName]));
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = entries(Resources)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      const _step$value = _slicedToArray(_step.value, 2),
            funcName = _step$value[0],
            _step$value$ = _step$value[1],
            VpcConfig = _step$value$.Properties.VpcConfig,
            Type = _step$value$.Type;

      if (Type !== 'AWS::Lambda::Function') {
        continue;
      }

      if (!VpcConfig || !VpcConfig.SecurityGroupIds || !VpcConfig.SubnetIds) {
        failed = true;
        policy.fail(`Function "${logicalFuncNamesToConfigFuncName[funcName] || funcName}" doesn't satisfy global VPC requirement.`);
      } else if (VpcConfig.SubnetIds.length < minNumSubnets) {
        failed = true;
        policy.fail(`Function "${logicalFuncNamesToConfigFuncName[funcName] || funcName}" doesn't satisfy the global VPC requirement of at least ${minNumSubnets} subnets.`);
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return != null) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  if (!failed) {
    policy.approve();
  }
};

module.exports.docs = 'http://slss.io/sg-require-global-vpc';
//# sourceMappingURL=require-global-vpc.js.map