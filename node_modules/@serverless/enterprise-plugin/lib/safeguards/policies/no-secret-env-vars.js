'use strict';

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

const _require = require('lodash'),
      entries = _require.entries,
      fromPairs = _require.fromPairs,
      values = _require.values; // from https://github.com/dxa4481/truffleHogRegexes/blob/master/truffleHogRegexes/regexes.json


const truffleHogRegexes = {
  'Slack Token': new RegExp('(xox[p|b|o|a]-[0-9]{12}-[0-9]{12}-[0-9]{12}-[a-z0-9]{32})'),
  'RSA private key': new RegExp('-----BEGIN RSA PRIVATE KEY-----'),
  'SSH (OPENSSH) private key': new RegExp('-----BEGIN OPENSSH PRIVATE KEY-----'),
  'SSH (DSA) private key': new RegExp('-----BEGIN DSA PRIVATE KEY-----'),
  'SSH (EC) private key': new RegExp('-----BEGIN EC PRIVATE KEY-----'),
  'PGP private key block': new RegExp('-----BEGIN PGP PRIVATE KEY BLOCK-----'),
  'Facebook Oauth': new RegExp('[f|F][a|A][c|C][e|E][b|B][o|O][o|O][k|K].*[\'|"][0-9a-f]{32}[\'|"]'),
  'Twitter Oauth': new RegExp('[t|T][w|W][i|I][t|T][t|T][e|E][r|R].*[\'|"][0-9a-zA-Z]{35,44}[\'|"]'),
  'GitHub': new RegExp('[g|G][i|I][t|T][h|H][u|U][b|B].*[\'|"][0-9a-zA-Z]{35,40}[\'|"]'),
  'Google Oauth': new RegExp('("client_secret":"[a-zA-Z0-9-_]{24}")'),
  'AWS API Key': new RegExp('AKIA[0-9A-Z]{16}'),
  'Heroku API Key': new RegExp('[h|H][e|E][r|R][o|O][k|K][u|U].*[0-9A-F]{8}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{12}'),
  'Generic Secret': new RegExp('[s|S][e|E][c|C][r|R][e|E][t|T].*[\'|"][0-9a-zA-Z]{32,45}[\'|"]'),
  'Generic API Key': new RegExp('[a|A][p|P][i|I][_]?[k|K][e|E][y|Y].*[\'|"][0-9a-zA-Z]{32,45}[\'|"]'),
  'Slack Webhook': new RegExp('https://hooks.slack.com/services/T[a-zA-Z0-9_]{8}/B[a-zA-Z0-9_]{8}/[a-zA-Z0-9_]{24}'),
  'Google (GCP) Service-account': new RegExp('"type": "service_account"'),
  'Twilio API Key': new RegExp('SK[a-z0-9]{32}'),
  'Password in URL': new RegExp('[a-zA-Z]{3,10}://[^/\\s:@]{3,20}:[^/\\s:@]{3,20}@.{1,100}["\'\\s]')
};

function isSecret(string) {
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = values(truffleHogRegexes)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      const regex = _step.value;

      if (regex.test(string)) {
        return true;
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return != null) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return false;
}

module.exports = function noSecretEnvVarsPolicy(policy, service) {
  let failed = false;
  const functions = service.declaration.functions,
        naming = service.provider.naming,
        Resources = service.compiled['cloudformation-template-update-stack.json'].Resources;
  const logicalFuncNamesToConfigFuncName = fromPairs(Object.keys(functions || {}).map(funcName => [naming.getLambdaLogicalId(funcName), funcName]));
  var _iteratorNormalCompletion2 = true;
  var _didIteratorError2 = false;
  var _iteratorError2 = undefined;

  try {
    for (var _iterator2 = entries(Resources)[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
      const _step2$value = _slicedToArray(_step2.value, 2),
            funcName = _step2$value[0],
            _step2$value$ = _step2$value[1],
            Properties = _step2$value$.Properties,
            Type = _step2$value$.Type;

      if (Type !== 'AWS::Lambda::Function' || !Properties.Environment || !Properties.Environment.Variables) {
        continue;
      }

      var _iteratorNormalCompletion3 = true;
      var _didIteratorError3 = false;
      var _iteratorError3 = undefined;

      try {
        for (var _iterator3 = entries(Properties.Environment.Variables)[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
          const _step3$value = _slicedToArray(_step3.value, 2),
                name = _step3$value[0],
                value = _step3$value[1];

          if (isSecret(value)) {
            const configFuncName = logicalFuncNamesToConfigFuncName[funcName] || funcName;
            failed = true;
            policy.fail(`Environment variable ${name} on function '${configFuncName || funcName}' looks like it contains a secret value`);
          }
        }
      } catch (err) {
        _didIteratorError3 = true;
        _iteratorError3 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion3 && _iterator3.return != null) {
            _iterator3.return();
          }
        } finally {
          if (_didIteratorError3) {
            throw _iteratorError3;
          }
        }
      }
    }
  } catch (err) {
    _didIteratorError2 = true;
    _iteratorError2 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
        _iterator2.return();
      }
    } finally {
      if (_didIteratorError2) {
        throw _iteratorError2;
      }
    }
  }

  if (!failed) {
    policy.approve();
  }
};

module.exports.docs = 'http://slss.io/sg-no-secret-env-vars';
//# sourceMappingURL=no-secret-env-vars.js.map