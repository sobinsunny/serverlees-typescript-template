{"version":3,"sources":["../../../lib/deployment/parse.js"],"names":["fs","require","_","SDK","getServerlessFilePath","simpleGit","packageJsonVersion","version","git","silent","parseDeploymentData","ctx","status","error","archived","service","sls","deployment","Deployment","accountId","provider","getAccountId","serverlessFileName","processedInput","options","config","servicePath","serverlessFile","readFile","toString","cfnStack","request","StackName","naming","getStackName","requestError","providerError","statusCode","logsRoleArn","custom","enterprise","logAccessIamRole","logsRole","find","Stacks","Outputs","OutputKey","OutputValue","logIngestMode","outputs","entries","outputKey","outputValue","startsWith","cfnOutput","slice","set","buildId","process","env","SLS_BUILD_ID","versionFramework","versionEnterprisePlugin","tenantUid","appUid","tenantName","tenant","appName","app","serviceName","stageName","getStage","regionName","getRegion","deploymentUid","type","aws","layers","plugins","modules","safeguards","state","safeguardsResults","secrets","Array","from","secretsUsed","vcs","isGit","checkIsRepo","err","branch","current","origin","raw","trim","remotes","getRemotes","originRemote","filter","name","originUrl","refs","fetch","commit","gitShowError","message","includes","commitMessage","committerEmail","relativePath","Object","keys","functions","fnName","fn","deployedFunctionName","events","setFunction","description","timeout","arn","handler","memorySize","memory","runtime","environment","role","onError","awsKmsKeyArn","tags","vpc","sub","subDetails","apigResource","endsWith","match","getServiceEndpointRegex","apiId","split","http","path","method","restApiId","cors","integration","assign","websocketApiId","setSubscription","function","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\n/*\n * Save Deployment\n * - This uses the new deployment data model.\n */\n\nconst fs = require('fs-extra');\nconst _ = require('lodash');\nconst SDK = require('@serverless/platform-sdk');\nconst getServerlessFilePath = require('./getServerlessFilePath');\nconst simpleGit = require('simple-git/promise');\nconst { version: packageJsonVersion } = require('../../package');\n\nconst git = simpleGit();\ngit.silent(true);\n\n/*\n * Parse Deployment Data\n * - Takes data from the Framework and formats it into our data model\n */\n\nconst parseDeploymentData = async (ctx, status = 'success', error = null, archived = false) => {\n  const { service } = ctx.sls;\n  const deployment = new SDK.Deployment();\n\n  const accountId = await ctx.provider.getAccountId();\n  const serverlessFileName = await getServerlessFilePath(\n    ctx.sls.processedInput.options.config,\n    ctx.sls.config.servicePath\n  );\n  const serverlessFile = (await fs.readFile(serverlessFileName)).toString();\n  /*\n   * Add deployment data...\n   */\n\n  if (!archived) {\n    const cfnStack = await (async () => {\n      try {\n        return await ctx.provider.request('CloudFormation', 'describeStacks', {\n          StackName: ctx.provider.naming.getStackName(),\n        });\n      } catch (requestError) {\n        const { providerError } = requestError;\n        if (providerError) {\n          // 400 means stack was not deployed yet (first deployment failed)\n          if (providerError.statusCode === 400) return null;\n        }\n\n        throw requestError;\n      }\n    })();\n\n    let logsRoleArn;\n    if (\n      ctx.sls.service.custom &&\n      ctx.sls.service.custom.enterprise &&\n      ctx.sls.service.custom.enterprise.logAccessIamRole\n    ) {\n      logsRoleArn = ctx.sls.service.custom.enterprise.logAccessIamRole;\n    } else {\n      // get log access role info\n      const logsRole =\n        cfnStack &&\n        _.find(\n          cfnStack.Stacks[0].Outputs,\n          ({ OutputKey }) => OutputKey === 'EnterpriseLogAccessIamRole'\n        );\n      logsRoleArn = logsRole && logsRole.OutputValue;\n    }\n    let logIngestMode = 'push';\n    if (\n      ctx.sls.service.custom &&\n      ctx.sls.service.custom.enterprise &&\n      ctx.sls.service.custom.enterprise.logIngestMode\n    ) {\n      logIngestMode = 'pull';\n    }\n\n    // get any CFN outputs\n    const outputs = service.outputs || {};\n    for (const [outputKey, outputValue] of _.entries(outputs)) {\n      if (typeof outputValue === 'string' && outputValue.startsWith('CFN!?')) {\n        if (cfnStack) {\n          const cfnOutput = _.find(\n            cfnStack.Stacks[0].Outputs,\n            ({ OutputKey }) => OutputKey === `${outputValue.slice(5)}`\n          );\n          outputs[outputKey] = cfnOutput.OutputValue;\n        } else {\n          delete outputs[outputKey];\n        }\n      }\n    }\n\n    deployment.set({\n      buildId: process.env.SLS_BUILD_ID,\n      serverlessFile,\n      serverlessFileName,\n      versionFramework: ctx.sls.version,\n      versionEnterprisePlugin: packageJsonVersion,\n      tenantUid: service.tenantUid,\n      appUid: service.appUid,\n      tenantName: service.tenant,\n      appName: service.app,\n      serviceName: service.service,\n      stageName: ctx.provider.getStage(),\n      regionName: ctx.provider.getRegion(),\n      deploymentUid: ctx.deploymentUid,\n      logsRoleArn,\n      archived,\n      status,\n      provider: {\n        type: 'aws',\n        aws: { accountId },\n        // environment: Object.keys(service.provider.environment || {})\n      },\n      layers: service.layers || {},\n      plugins: service.plugins ? service.plugins.modules || service.plugins : [],\n      custom: service.custom || {},\n      safeguards: ctx.state.safeguardsResults,\n      secrets: Array.from(ctx.state.secretsUsed),\n      outputs,\n      error,\n      logIngestMode,\n    });\n\n    const vcs = { type: null };\n    // Add VCS info\n    try {\n      const isGit = await git.checkIsRepo();\n      if (isGit) {\n        vcs.type = 'git';\n      }\n    } catch (err) {\n      // pass\n    }\n    if (vcs.type === 'git') {\n      const branch = await git.branch();\n      if (branch.current) {\n        let origin = await git.raw(['config', `branch.${branch.current}.remote`]);\n        if (origin) {\n          origin = origin.trim();\n          const remotes = await git.getRemotes();\n          const originRemote = remotes.filter(({ name }) => name === origin)[0];\n          if (originRemote) vcs.originUrl = originRemote.refs.fetch;\n        }\n        vcs.branch = branch.current;\n      }\n      try {\n        vcs.commit = (await git.raw(['show', '-s', '--format=%H', branch.current || ''])).trim();\n      } catch (gitShowError) {\n        // Most likely a fresh repo (no commits)\n        if (!gitShowError.message.includes('fatal:')) throw gitShowError;\n      }\n      if (vcs.commit) {\n        vcs.commitMessage = (\n          await git.raw(['show', '-s', '--format=%B', branch.current || ''])\n        ).trim();\n        vcs.committerEmail = (\n          await git.raw(['show', '-s', '--format=%ae', branch.current || ''])\n        ).trim();\n      }\n      vcs.relativePath = (await git.raw(['rev-parse', '--show-prefix'])).trim();\n    }\n    deployment.set({ vcs });\n\n    /*\n     * Add this deployment's functions...\n     */\n\n    for (const fnName of Object.keys(service.functions)) {\n      const fn = service.functions[fnName];\n      const deployedFunctionName =\n        fn.name || `${service.service}-${ctx.provider.getStage()}-${fnName}`;\n      fn.events = fn.events || [];\n\n      // Function\n      deployment.setFunction({\n        name: deployedFunctionName,\n        description: fn.description || null,\n        timeout: fn.timeout,\n        type: 'awsLambda',\n        arn: `arn:aws:lambda:${ctx.provider.getRegion()}:${accountId}:function:${deployedFunctionName}`,\n        custom: {\n          handler: fn.handler,\n          memorySize: fn.memory,\n          runtime: fn.runtime,\n          environment: Object.keys(fn.environment || {}),\n          role: fn.role,\n          onError: fn.onError,\n          awsKmsKeyArn: fn.awsKmsKeyArn,\n          tags: fn.tags || {},\n          vpc: fn.vpc || {},\n          layers: fn.layers || [],\n          name: fn.name || fnName,\n        },\n      });\n\n      /*\n       * Add this functions's subscriptions...\n       */\n\n      for (const sub of fn.events) {\n        let subDetails = {};\n        let type;\n        if (typeof sub === 'string') {\n          type = sub;\n        } else {\n          type = Object.keys(sub)[0];\n          if (type === 'http' && cfnStack) {\n            const apigResource = _.find(\n              cfnStack.Stacks[0].Outputs,\n              ({ OutputKey }) =>\n                !OutputKey.endsWith('Websocket') &&\n                OutputKey.match(ctx.provider.naming.getServiceEndpointRegex())\n            );\n            const apiId =\n              apigResource && apigResource.OutputValue.split('https://')[1].split('.')[0];\n\n            if (typeof sub.http === 'string') {\n              subDetails = {\n                path: sub.http.split(' ')[1],\n                method: sub.http.split(' ')[0],\n                restApiId: apiId,\n              };\n            } else {\n              subDetails = {\n                path: sub.http.path,\n                method: sub.http.method,\n                cors: sub.http.cors,\n                integration: sub.http.integration,\n                restApiId: apiId,\n              };\n            }\n          } else if (sub[type] instanceof Object) {\n            Object.assign(subDetails, sub[type]);\n          } else {\n            Object.assign(subDetails, { [type]: sub[type] });\n          }\n          if (type === 'websocket' && cfnStack) {\n            const apigResource = _.find(\n              cfnStack.Stacks[0].Outputs,\n              ({ OutputKey }) =>\n                OutputKey.endsWith('Websocket') &&\n                OutputKey.match(ctx.provider.naming.getServiceEndpointRegex())\n            );\n            const apiId = apigResource && apigResource.OutputValue.split('wss://')[1].split('.')[0];\n            subDetails.websocketApiId = apiId;\n          }\n        }\n\n        deployment.setSubscription({ type, function: deployedFunctionName, ...subDetails });\n      }\n    }\n  } else {\n    deployment.set({\n      buildId: process.env.SLS_BUILD_ID,\n      versionFramework: ctx.sls.version,\n      versionEnterprisePlugin: packageJsonVersion,\n      tenantUid: service.tenantUid,\n      appUid: service.appUid,\n      tenantName: service.tenant,\n      appName: service.app,\n      serviceName: service.service,\n      stageName: ctx.provider.getStage(),\n      regionName: ctx.provider.getRegion(),\n      archived,\n      status,\n      secrets: Array.from(ctx.state.secretsUsed),\n      error,\n    });\n  }\n\n  return deployment;\n};\n\nmodule.exports = parseDeploymentData;\n"],"file":"parse.js"}